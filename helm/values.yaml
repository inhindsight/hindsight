orchestrate:
  replicaCount: 1
receive:
  replicaCount: 1
  service:
    port: 80
  service_tcp:
    port: 6790
gather:
  replicaCount: 1
broadcast:
  replicaCount: 1
  service:
    port: 80
persist:
  replicaCount: 1
acquire:
  replicaCount: 1
  service:
    port: 80
strimzi:
  enabled: true
  kafka:
    replicaCount: 3
    storage:
      enabled: false
      size: ""
redis:
  usePassword: false
  cluster:
    enabled: false
nginx-ingress:
  controller:
    metrics:
      enabled: true
    service:
      type: LoadBalancer
prometheus-operator:
  enabled: true
  prometheusOperator:
    namespaces:
      releaseNamespace: true
      additional:
        - kube-system
  prometheus:
    ingress:
      enabled: true
  alertmanager:
    ingress:
      enabled: true
  grafana:
    ingress:
      enabled: true

image:
  repository: inhindsight/hindsight
  tag: ""
  pullPolicy: Always

global:
  objectStore:
    bucketName: ""
  ingress: {}

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name:

podSecurityContext: {}
securityContext: {}

ingress:
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
  host: ""
  paths:
    - name: acquire
      path: "/api/v[0-9]+/data/.*"
    - name: broadcast
      path: "/socket/websocket"
  tls: []

resources: {}
nodeSelector: {}
tolerations: []
affinity: {}
