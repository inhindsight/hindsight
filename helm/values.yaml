orchestrate:
  replicaCount: 1
receive:
  replicaCount: 1
  service_udp:
    port: 6790
  service:
    port: 80
gather:
  replicaCount: 1
broadcast:
  replicaCount: 1
  service:
    port: 80
persist:
  replicaCount: 1
acquire:
  replicaCount: 1
  service:
    port: 80
image:
  repository: inhindsight/hindsight
  tag: ""
  pullPolicy: Always

global:
  objectStore:
    bucketName: ""
  ingress: {}

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name:

podSecurityContext: {}
securityContext: {}

ingress:
  annotations:
    nginx.ingress.kubernetes.io/use-regex: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-issuer"
  host: ""
  tls:
    - hosts:
        - ""
      secretName: "acme-cert"
  paths:
    - name: acquire
      path: "/api/v[0-9]+/data/.*"
    - name: broadcast
      path: "/socket/websocket"

resources: {}
nodeSelector: {}
tolerations: []
affinity: {}

# Strimzi subchart
strimzi:
  enabled: true
  kafka:
    replicaCount: 3
    storage:
      enabled: false
      size: ""
  zookeeper:
    storage:
      enabled: false
      size: ""

# Redis subchart
redis:
  usePassword: false
  cluster:
    enabled: false

# Nginx Ingress subchart
nginx-ingress:
  controller:
    metrics:
      enabled: true
    service:
      type: LoadBalancer

# Prometheus subchart
prometheus-operator:
  enabled: false
  prometheusOperator:
    namespaces:
      releaseNamespace: true
      additional:
        - kube-system

# Cert-Manager subchart
cert_manager:
  enabled: false

# VerneMQ subchart
vernemq:
  enabled: false
  image:
    repository: jeffgrunewald/vernemq
    tag: latest
